global
    maxconn 32000
    nbthread 4
    cpu-map auto:1/1-4 0-3

defaults
    mode http
    timeout connect 5s
    timeout client 90s
    timeout server 600s
    timeout check 600s

backend publish_backend
    balance roundrobin
    http-reuse always
    option httpchk
    http-check send meth GET uri /status
    http-check expect status 200
    server publish1 localhost:40100 check inter 5s fall 1 downinter 1s rise 1

backend pull_backend
    balance roundrobin
    http-reuse always
    option httpchk
    http-check send meth GET uri /status
    http-check expect status 200
    server pull1 localhost:40200 check inter 5s fall 1 downinter 1s rise 1

backend common_backend
    balance roundrobin
    http-reuse always
    option httpchk
    http-check send meth GET uri /status
    http-check expect status 200
    server publish1 localhost:40100 check inter 5s fall 1 downinter 1s rise 1
    server pull1 localhost:40200 check inter 5s fall 1 downinter 1s rise 1

backend server_backend
    balance roundrobin
    http-reuse always
    option httpchk
    http-check send meth GET uri /zato/ping
    http-check expect status 200
    server server1 localhost:17010 check inter 5s fall 1 downinter 1s rise 1

frontend main
    bind 0.0.0.0:11223
    log global
    option logasap

    option forwardfor
    option http-keep-alive

    # Route root endpoint
    acl is_root path /
    http-request return status 200 content-type application/json string '{"is_ok":true}' if is_root

    # Route publish requests to publish backend
    acl is_publish path_beg /pubsub/topic/
    use_backend publish_backend if is_publish

    # Route message pull requests to pull backend
    acl is_pull path_beg /pubsub/messages/get
    use_backend pull_backend if is_pull

    acl is_subscribe path_beg /pubsub/subscribe/
    acl is_unsubscribe path_beg /pubsub/unsubscribe/

    use_backend publish_backend if is_subscribe
    use_backend publish_backend if is_unsubscribe

    # Route other to both backends (round robin)
    acl is_admin path_beg /pubsub/admin/
    use_backend common_backend if is_admin

    # Default backend for all other requests
    default_backend server_backend

userlist stats-users
    user stats password "${Zato_Load_Balancer_Stats_Password}"

userlist metrics-users
    user metrics password "${Zato_Load_Balancer_Metrics_Password}"

listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    http-request auth unless { http_auth(stats-users) }
    acl is_metrics_path path /metrics
    http-request auth realm "Metrics" if is_metrics_path !{ http_auth(metrics-users) }
    http-request use-service prometheus-exporter if { path /metrics }
